{"ast":null,"code":"/**\n * Convert data in CSV (comma separated value) format to a javascript array.\n *\n * Values are separated by a comma, or by a custom one character delimeter.\n * Rows are separated by a new-line character.\n *\n * Leading and trailing spaces and tabs are ignored.\n * Values may optionally be enclosed by double quotes.\n * Values containing a special character (comma's, double-quotes, or new-lines)\n *   must be enclosed by double-quotes.\n * Embedded double-quotes must be represented by a pair of consecutive \n * double-quotes.\n *\n * Example usage:\n *   var csv = '\"x\", \"y\", \"z\"\\n12.3, 2.3, 8.7\\n4.5, 1.2, -5.6\\n';\n *   var array = csv2array(csv);\n *  \n * Author: Jos de Jong, 2010\n * \n * @param {string} data      The data in CSV format.\n * @param {string} delimeter [optional] a custom delimeter. Comma ',' by default\n *                           The Delimeter must be a single character.\n * @return {Array} array     A two dimensional array containing the data\n * @throw {String} error     The method throws an error when there is an\n *                           error in the provided data.\n */\nexport default function csv2array(data, delimeter) {\n  // Retrieve the delimeter\n  if (delimeter === undefined) delimeter = ',';\n  if (delimeter && delimeter.length > 1) delimeter = ','; // initialize variables\n\n  var newline = '\\n';\n  var eof = '';\n  var i = 0;\n  var c = data.charAt(i);\n  var row = 0;\n  var col = 0;\n  var array = new Array();\n\n  while (c != eof) {\n    // skip whitespaces\n    while (c == ' ' || c == '\\t' || c == '\\r') {\n      c = data.charAt(++i); // read next char\n    } // get value\n\n\n    var value = \"\";\n\n    if (c == '\\\"') {\n      // value enclosed by double-quotes\n      c = data.charAt(++i);\n\n      do {\n        if (c != '\\\"') {\n          // read a regular character and go to the next character\n          value += c;\n          c = data.charAt(++i);\n        }\n\n        if (c == '\\\"') {\n          // check for escaped double-quote\n          var cnext = data.charAt(i + 1);\n\n          if (cnext == '\\\"') {\n            // this is an escaped double-quote. \n            // Add a double-quote to the value, and move two characters ahead.\n            value += '\\\"';\n            i += 2;\n            c = data.charAt(i);\n          }\n        }\n      } while (c != eof && c != '\\\"');\n\n      if (c == eof) {\n        throw \"Unexpected end of data, double-quote expected\";\n      }\n\n      c = data.charAt(++i);\n    } else {\n      // value without quotes\n      while (c != eof && c != delimeter && c != newline && c != ' ' && c != '\\t' && c != '\\r') {\n        value += c;\n        c = data.charAt(++i);\n      }\n    } // add the value to the array\n\n\n    if (array.length <= row) array.push(new Array());\n    array[row].push(value); // skip whitespaces\n\n    while (c == ' ' || c == '\\t' || c == '\\r') {\n      c = data.charAt(++i);\n    } // go to the next row or column\n\n\n    if (c == delimeter) {\n      // to the next column\n      col++;\n    } else if (c == newline) {\n      // to the next row\n      col = 0;\n      row++;\n    } else if (c != eof) {\n      // unexpected character\n      throw \"Delimiter expected after character \" + i;\n    } // go to the next character\n\n\n    c = data.charAt(++i);\n  }\n\n  return array;\n}","map":{"version":3,"sources":["/Users/desmondmolloy/Desktop/Codecademy_bench/src/data/csv2array.js"],"names":["csv2array","data","delimeter","undefined","length","newline","eof","i","c","charAt","row","col","array","Array","value","cnext","push"],"mappings":"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","sourcesContent":["/**\n * Convert data in CSV (comma separated value) format to a javascript array.\n *\n * Values are separated by a comma, or by a custom one character delimeter.\n * Rows are separated by a new-line character.\n *\n * Leading and trailing spaces and tabs are ignored.\n * Values may optionally be enclosed by double quotes.\n * Values containing a special character (comma's, double-quotes, or new-lines)\n *   must be enclosed by double-quotes.\n * Embedded double-quotes must be represented by a pair of consecutive \n * double-quotes.\n *\n * Example usage:\n *   var csv = '\"x\", \"y\", \"z\"\\n12.3, 2.3, 8.7\\n4.5, 1.2, -5.6\\n';\n *   var array = csv2array(csv);\n *  \n * Author: Jos de Jong, 2010\n * \n * @param {string} data      The data in CSV format.\n * @param {string} delimeter [optional] a custom delimeter. Comma ',' by default\n *                           The Delimeter must be a single character.\n * @return {Array} array     A two dimensional array containing the data\n * @throw {String} error     The method throws an error when there is an\n *                           error in the provided data.\n */ \nexport default function csv2array(data, delimeter) {\n  // Retrieve the delimeter\n  if (delimeter === undefined) \n    delimeter = ',';\n  if (delimeter && delimeter.length > 1)\n    delimeter = ',';\n\n  // initialize variables\n  var newline = '\\n';\n  var eof = '';\n  var i = 0;\n  var c = data.charAt(i);\n  var row = 0;\n  var col = 0;\n  var array = new Array();\n\n  while (c != eof) {\n    // skip whitespaces\n    while (c == ' ' || c == '\\t' || c == '\\r') {\n      c = data.charAt(++i); // read next char\n    }\n    \n    // get value\n    var value = \"\";\n    if (c == '\\\"') {\n      // value enclosed by double-quotes\n      c = data.charAt(++i);\n      \n      do {\n        if (c != '\\\"') {\n          // read a regular character and go to the next character\n          value += c;\n          c = data.charAt(++i);\n        }\n        \n        if (c == '\\\"') {\n          // check for escaped double-quote\n          var cnext = data.charAt(i+1);\n          if (cnext == '\\\"') {\n            // this is an escaped double-quote. \n            // Add a double-quote to the value, and move two characters ahead.\n            value += '\\\"';\n            i += 2;\n            c = data.charAt(i);\n          }\n        }\n      }\n      while (c != eof && c != '\\\"');\n      \n      if (c == eof) {\n        throw \"Unexpected end of data, double-quote expected\";\n      }\n\n      c = data.charAt(++i);\n    }\n    else {\n      // value without quotes\n      while (c != eof && c != delimeter && c!= newline && c != ' ' && c != '\\t' && c != '\\r') {\n        value += c;\n        c = data.charAt(++i);\n      }\n    }\n\n    // add the value to the array\n    if (array.length <= row) \n      array.push(new Array());\n    array[row].push(value);\n    \n    // skip whitespaces\n    while (c == ' ' || c == '\\t' || c == '\\r') {\n      c = data.charAt(++i);\n    }\n\n    // go to the next row or column\n    if (c == delimeter) {\n      // to the next column\n      col++;\n    }\n    else if (c == newline) {\n      // to the next row\n      col = 0;\n      row++;\n    }\n    else if (c != eof) {\n      // unexpected character\n      throw \"Delimiter expected after character \" + i;\n    }\n    \n    // go to the next character\n    c = data.charAt(++i);\n  }  \n  \n  return array;\n}"]},"metadata":{},"sourceType":"module"}